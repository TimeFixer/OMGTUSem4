import streamlit as st
import pandas as pd
import pickle
import os

st.set_page_config(page_title="Diamond Price Prediction", layout="centered")
st.title("üíé –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∞–ª–º–∞–∑–∞")
st.markdown("–í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–ª–º–∞–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω—ã.")

models_dir = "models"

if not os.path.exists(models_dir):
    st.error(f"–ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {models_dir}")
else:
    model_files = [f for f in os.listdir(models_dir) if f.endswith('.pkl')]
    if not model_files:
        st.warning("–í –ø–∞–ø–∫–µ models –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π (.pkl —Ñ–∞–π–ª–æ–≤)")
    else:
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", model_files)
        model_path = os.path.join(models_dir, selected_model)
        
        with open(model_path, "rb") as f:
            model = pickle.load(f)
        st.success(f"‚úÖ –ú–æ–¥–µ–ª—å '{selected_model}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        pipeline_models = ['PolynomialRegression.pkl', 'DecisionTreeRegressor.pkl']

        st.subheader("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–ª–º–∞–∑–∞")
        carat = st.number_input("–ö–∞—Ä–∞—Ç", min_value=0.2, max_value=5.0, value=1.0, step=0.01)
        cut = st.selectbox("–û–≥—Ä–∞–Ω–∫–∞", ['Fair', 'Good', 'Very Good', 'Premium', 'Ideal'])
        color = st.selectbox("–¶–≤–µ—Ç", ['D', 'E', 'F', 'G', 'H', 'I', 'J'])
        clarity = st.selectbox("–ß–∏—Å—Ç–æ—Ç–∞", ['I1', 'SI2', 'SI1', 'VS2', 'VS1', 'VVS2', 'VVS1', 'IF'])
        depth = st.number_input("–ì–ª—É–±–∏–Ω–∞ (%)", min_value=30.0, max_value=90.0, value=60.0, step=0.1)
        table = st.number_input("–¢–∞–±–ª–∏—Ü–∞ (%)", min_value=30.0, max_value=90.0, value=55.0, step=0.1)
        x = st.number_input("–î–ª–∏–Ω–∞ (–º–º)", min_value=3.0, max_value=10.0, value=5.0, step=0.01)
        y = st.number_input("–®–∏—Ä–∏–Ω–∞ (–º–º)", min_value=3.0, max_value=10.0, value=5.0, step=0.01)
        z = st.number_input("–í—ã—Å–æ—Ç–∞ (–º–º)", min_value=2.0, max_value=6.0, value=3.0, step=0.01)

        if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
            input_data = pd.DataFrame({
                'carat': [carat],
                'cut': [cut],
                'color': [color],
                'clarity': [clarity],
                'depth': [depth],
                'table': [table],
                'x': [x],
                'y': [y],
                'z': [z]
            })
            prediction = model.predict(input_data)[0]

            st.success(f"üí∞ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞ –∞–ª–º–∞–∑–∞: **${round(prediction, 2)}**")

st.markdown("---")
st.markdown("¬© 2025 ‚Äî Diamond Price Predictor App")